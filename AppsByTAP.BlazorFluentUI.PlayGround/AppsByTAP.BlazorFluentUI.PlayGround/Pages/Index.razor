@page "/"

@using AppsByTAP.BlazorFluentUI.Components.Theme.Models
@using AppsByTAP.BlazorFluentUI.Components.Theme.Themes.Light
@using AppsByTAP.BlazorFluentUI.Components.Theme.Themes.Dark
@using AppsByTAP.BlazorFluentUI.Components.Button
@using AppsByTAP.BlazorFluentUI.Components.DropDown
@using AppsByTAP.BlazorFluentUI.Components.Icon
@using AppsByTAP.BlazorFluentUI.Components.Expander
@using AppsByTAP.BlazorFluentUI.Components.Spinner
@using AppsByTAP.BlazorFluentUI.Components.Modal
@using AppsByTAP.BlazorFluentUI.Components.CheckBox
@using AppsByTAP.BlazorFluentUI.Components.Chip

@inject IThemeProvider ThemeProvider

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<button @onclick="ChangeTheme">Change Theme</button>
<DefaultButton Text="Toggle Spinners" IsPrimary="false" OnClick="ToggleSpinners" />
<DefaultButton Text="My Btn" IsPrimary="true" OnClick="Add" />
<CompoundButton Text="TAP Standard" SecondaryText="My Sec txt" IsPrimary="false" OnClick="Add" />
<CompoundButton Text="TAP Standard" SecondaryText="My Sec txt" IsPrimary="true" OnClick="Add" />

<DropDown ItemsSource="ints2" Disabled="true" />
<DropDown ItemsSource="ints2" @bind-SelectedItem="_selectedItem" Label="My Label" Disabled="true" />
<DropDown ItemsSource="strs" @bind-SelectedItem="_selectedStr" IsMultiSelect="true" />
<Expander Header="Expander">
    <ChildContent>
        <p>Hello World</p>
    </ChildContent>
</Expander>
<Spinner Label="Hello World" Size="SpinnerSize.Large" IsLoading="_isLoading" />
<Spinner Label="Hello World" Position="SpinnerLabelPosition.Top" Size="SpinnerSize.Medium" IsLoading="_isLoading" />
<Spinner Label="Hello World" Position="SpinnerLabelPosition.Left" Size="SpinnerSize.Small" IsLoading="_isLoading" />
<Spinner Label="Hello World" Position="SpinnerLabelPosition.Right" Size="SpinnerSize.xSmall" IsLoading="_isLoading" />

@counter
Selected Item: @((_selectedItem is not null ? _selectedItem : new DropDownItem("", DropDownItemType.Header).ToString()))

<DefaultButton Text="Show Modal" OnClick="() => _showModal = !_showModal" />

<CheckBox Label="Hello World Start" />
<CheckBox Label="Hello World End" BoxSide="BoxSide.End" />

<ChipSet ItemsSource="strs" ChipType="ChipType.Input" Label="Test: " CreateNewItem="CreateNewItem" />


<Modal @bind-ShowWindow="_showModal">
    <Header>
        My Header
    </Header>
    <Content>
        sed est quis, pharetra consequat libero.
    </Content>
</Modal>

@code
{
    private int counter = 0;
    private bool _isDark = true;
    private bool _isLoading = true;
    private DropDownItem _selectedItem = null;
    private string _selectedStr = "";
    private bool _showModal;

    List<DropDownItem>
    ints2 = new List<DropDownItem>
        {
        new DropDownItem("Header1", DropDownItemType.Header),
        new DropDownItem("Item 1", DropDownItemType.Item),
        new DropDownItem("Item 2", DropDownItemType.Item),
        new DropDownItem("Item 3", DropDownItemType.Item),
        new DropDownItem("Item 4", DropDownItemType.Item),
        new DropDownItem("Header 2", DropDownItemType.Header),
        new DropDownItem("Item 5", DropDownItemType.Item),
        new DropDownItem("Item 6", DropDownItemType.Item),
        new DropDownItem("Item 7", DropDownItemType.Item),
        new DropDownItem("Item 8", DropDownItemType.Item)
                                    };

    List<string> strs = new List<string> { "Apple", "Banana", "Strawberry", "Blackberry", "Blueberry", "Raspberry", "Grapes", "Plum", "Pear" };

    public Index()
    {

    }

    private void ChangeTheme()
    {
        if (_isDark)
        {
            ThemeProvider.ChangeTheme(ThemeProvider.CreateTheme(new LightThemePalette()));
        }
        else
        {
            ThemeProvider.ChangeTheme(ThemeProvider.CreateTheme(new DarkThemePalette()));
        }

        _isDark = !_isDark;
    }

    private void Add()
    {
        counter++;
    }

    private void ToggleSpinners()
    {
        _isLoading = !_isLoading;
    }

    public class MeTest
    {
        public string MyStr { get; set; }

        public MeTest(string str) => MyStr = str;
        public override string ToString() => MyStr;
    }

    public void RemoveChip(string id)
    {
        Console.WriteLine("Remove the chip: " + id);
    }

    public void EditChip()
    {
        Console.WriteLine("Edit the chip");
    }

    public string CreateNewItem(string str) => str;

}
