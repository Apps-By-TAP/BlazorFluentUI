@page "/"

@using AppsByTAP.BlazorFluentUI.Components.Theme.Models
@using AppsByTAP.BlazorFluentUI.Components.Theme.Themes.Light
@using AppsByTAP.BlazorFluentUI.Components.Theme.Themes.Dark
@using AppsByTAP.BlazorFluentUI.Components.Button
@using AppsByTAP.BlazorFluentUI.Components.DropDown
@using AppsByTAP.BlazorFluentUI.Components.Icon

@inject IThemeProvider ThemeProvider

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<button @onclick="ChangeTheme">Change Theme</button>
<DefaultButton Text="My Btn" IsPrimary="false" OnClick="Add" />
<DefaultButton Text="My Btn" IsPrimary="true" OnClick="Add" />
<CompoundButton Text="TAP Standard" SecondaryText="My Sec txt" IsPrimary="false" OnClick="Add" />
<CompoundButton Text="TAP Standard" SecondaryText="My Sec txt" IsPrimary="true" OnClick="Add" />

<DropDown ItemsSource="ints2" Disabled="true" />
<DropDown ItemsSource="ints2" @bind-SelectedItem="_selectedItem" />

@counter
Selected Item: @((_selectedItem is not null ? _selectedItem : new DropDownItem("", DropDownItemType.Header).ToString()))

@code
{
    private int counter = 0;
    private bool _isDark = true;
    private DropDownItem _selectedItem = null;

    List<DropDownItem> ints2 = new List<DropDownItem>
{
        new DropDownItem("Header1", DropDownItemType.Header),
        new DropDownItem("Item 1", DropDownItemType.Item),
        new DropDownItem("Item 2", DropDownItemType.Item),
        new DropDownItem("Item 3", DropDownItemType.Item),
        new DropDownItem("Item 4", DropDownItemType.Item),
        new DropDownItem("Header 2", DropDownItemType.Header),
        new DropDownItem("Item 5", DropDownItemType.Item),
        new DropDownItem("Item 6", DropDownItemType.Item),
        new DropDownItem("Item 7", DropDownItemType.Item),
        new DropDownItem("Item 8", DropDownItemType.Item)
    };

    private void ChangeTheme()
    {
        if(_isDark)
        {
            ThemeProvider.ChangeTheme(ThemeProvider.CreateTheme(new LightThemePalette()));
        }
        else
        {
            ThemeProvider.ChangeTheme(ThemeProvider.CreateTheme(new DarkThemePalette()));
        }

        _isDark = !_isDark;
    }

    private void Add()
    {
        counter++;
    }

    public class MeTest
    {
        public string MyStr { get; set; }

        public MeTest(string str) => MyStr = str;
        public override string ToString() => MyStr;
    }

}
