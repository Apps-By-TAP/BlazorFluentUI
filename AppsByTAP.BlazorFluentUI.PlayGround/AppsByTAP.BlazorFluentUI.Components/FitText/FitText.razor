@using Microsoft.JSInterop;

<div id="@_id" class="@Class" style="font-size: @(_fontSize); width: @Width; height: @Height; display: flex; align-items: center; justify-content: @Alignment; @Style">
    @if (ChildContent is not null)
    {
        @ChildContent
    }
    else
    {
        @Text
    }
</div>

@code {
    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    private string _id;

    private Task<IJSObjectReference> _module;
    const string ImportPath = "./_content/AppsByTAP.BlazorFluentUI.Components/js/FitText.js";
    private Task<IJSObjectReference> Module => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", ImportPath).AsTask();

    private string _fontSize = "1em";

    [Parameter]
    public string Text { get; set; }
    [Parameter]
    public double Compressor { get; set; } = 1d;
    [Parameter]
    public string Style { get; set; }
    [Parameter]
    public string Class { get; set; }
    [Parameter]
    public Alignment Alignment { get; set; } = Alignment.Center;
    [Parameter]
    public RenderFragment ChildContent { get; set; } = null;
    [Parameter]
    public string Width { get; set; } = "100%";
    [Parameter]
    public string Height { get; set; } = "100%";

    protected override Task OnInitializedAsync()
    {
        _id = Guid.NewGuid().ToString();

        return base.OnInitializedAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var mod = await Module;
            await mod.InvokeVoidAsync("Register", _id, DotNetObjectReference.Create(this));
            await mod.InvokeVoidAsync("GetBounds", _id, DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async void SetElementBounds(double width, double height)
    {
        double numericFontSize = Math.Max(Math.Min(width / (Compressor * 10), int.MaxValue), int.MinValue);

        _fontSize = numericFontSize < 1 ? "1em" : numericFontSize + "px";

        await InvokeAsync(() => StateHasChanged());
    }
}
