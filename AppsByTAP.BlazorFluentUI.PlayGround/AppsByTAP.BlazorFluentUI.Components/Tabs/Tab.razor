
@if (Parent.ActivePage == this || Parent.LastTab == this)
{
    <div class="tabItem @(Parent.LastTab != this ? "slideOut" : "slideIn")"
         style="display: @(Parent.LastTab == this ? Delay() : "block")">
        @ChildContent
    </div>
}

@code {

    [CascadingParameter]
    private Tabs Parent { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Header { get; set; }

    [Parameter]
    public string Color { get; set; } = "var(--semanticTextColors-PrimaryButtonText)";

    protected override void OnInitialized()
    {
        if (Parent == null)
            throw new ArgumentNullException(nameof(Parent), "TabPage must exist within a TabControl");
        base.OnInitialized();

        Parent.AddPage(this);
    }

    private string Delay()
    {
        Task.Delay(300).Wait();
        return "none";
    }
}

<style>
    .slideOut {
        animation: Slide_left_out_40 300ms cubic-bezier(0.1,0.9,0.2,1);
    }


    .slideIn {
        animation: Slide_left_in_40 300ms cubic-bezier(0.1,0.9,0.2,1);
    }

    .tabItem{
        position: relative;
        top: 0px;
        display: inline-block;
    }
</style>